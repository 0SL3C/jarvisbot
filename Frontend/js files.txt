animation.js:{
document.addEventListener('DOMContentLoaded', initWeatherEffects);


//function to create effect on screen
function createRain() {
    const rainContainer = document.querySelector('.weather-effects');
    rainContainer.innerHTML = '';
  
      for(let i = 0; i < 50; i++) {
          const drop = document.createElement('div');
          drop.className = 'rain-drop';
          drop.style.left = Math.random() * 100 + 'vw';
          drop.style.animationDelay = Math.random() * 2 + 's';
          rainContainer.appendChild(drop);
      }
  }
  
  function updateWeatherEffects(message) {
    if (message.toLowerCase().includes('rain')) {
        changeWeather('rain');
    } else if (message.toLowerCase().includes('cloud')) {
        changeWeather('cloudy');
    }
  }
  
  function initWeatherEffects(){
    const effectsContainer = document.createElement('div');
    effectsContainer.className = 'weather-effects';
    document.body.appendChild(effectsContainer);
  }
  
  function updateWeatherBackground(condition) {
    const body = document.body;
    body.classList.remove('rainy-theme', 'snow-theme', 'sunny-theme');

    if (condition === 'rain') {
        body.classList.add('rainy-theme');
        createRain();
    } else if (condition === 'snow') {
        body.classList.add('snow-theme');
        createSnow();
    } else if (condition === 'sunny') {
        body.classList.add('sunny-theme');
        createSunny();
    }
}
  
  
  //snow activation

  function createSnow() {
    const snowContainer = document.querySelector('.weather-effects');
    snowContainer.innerHTML = '';

    for (let i = 0; i < 50; i++) {
        const flake = document.createElement('div');
        flake.className = 'snow-flake';
        flake.style.left = Math.random() * 100 + 'vw';
        flake.style.animationDelay = Math.random() * 5 + 's';
        snowContainer.appendChild(flake);
    }
}

function changeWeather(condition) {
    console.log("Weather condition:", condition); // Verifica se está sendo chamado
    initWeatherEffects(); // Garante que a div existe

    const effects = document.querySelector('.weather-effects');
    effects.innerHTML = '';
    
    if (condition === 'rain') {
        createRain();
    } else if (condition === 'cloudy') {
        effects.innerHTML = `
            <div class="cloud" style="top:30%">☁️</div>
            <div class="cloud" style="top:50%">⛅</div>
            <div class="fog-layer"></div>
        `;
    }
}

document.addEventListener('DOMContentLoaded', () => {
    initWeatherEffects();
    setTimeout(() => {
        changeWeather('rain');
    }, 500); // Aguarda 500ms antes de ativar a chuva
});

import { motion } from "framer-motion";

export default function ProgressBar({ progress }) {
  return (
    <div className="relative w-full h-6 bg-gray-800 rounded-2xl border border-blue-500 shadow-lg overflow-hidden">
      <motion.div
        className="h-full bg-gradient-to-r from-blue-500 to-purple-500"
        initial={{ width: 0 }}
        animate={{ width: `${progress}%` }}
        transition={{ duration: 0.5, ease: "easeOut" }}
      />
      <span className="absolute inset-0 flex items-center justify-center text-white font-semibold text-sm">
        {progress}%
      </span>
    </div>
  );
}
}

chat.js:{
  let ws;

$(document).ready(() => {
    console.log('chat.js loaded');
    $('#weatherOptions').hide();

    // Function to set min and max dates for date inputs
    function setDateConstraints() {
        const today = new Date();
        const maxDate = new Date(today);
        maxDate.setDate(today.getDate() + 5); // Today + 5 days

        // Format dates as YYYY-MM-DD
        const formatDate = (date) => {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        };

        // Set min and max for all date inputs
        $('.date-input').attr({
            'min': formatDate(today),
            'max': formatDate(maxDate)
        });
    }

    // Call initially to set constraints
    setDateConstraints();

    // Toggle chatbox visibility and manage WebSocket connection
    $('#chatToggle').on('click', () => {
        console.log('Chat toggle clicked');
        $('#chatbox').toggleClass('hidden');
        if ($('chatbox').hasClass('hidden')) {
            // If chatbox is hidden, close the WebSocket connection
            if (ws && ws.readyState === WebSocket.OPEN) {
                ws.close();
            }
        } else {
            // If chatbox is visible, create a new WebSocket connection
            if (!ws || ws.readyState === WebSocket.CLOSED) {
                ws = connectWebSocket();
            }
        }
    });

    // Close chat
    $('#closeChat').on('click', () => {
        $('#chatbox').addClass('hidden');
        ws.close();
    });

    // Weather button
    $('#weatherBtn').on('click', () => {
        $('#weatherBtn').hide();
        $('#weatherOptions').show();
    });

    let count = 1;
    
    $('#addBtn').off('click').on('click', () => {
        // Increment the count and hide the add button if the limit is reached
        count++;
        if (count === 5) {
            $('#addBtn').hide();
        }
    
        // Clone the input row template
        const newInputRow = $('.input-row:first').clone();
    
        // Clear the values of the cloned inputs
        newInputRow.find('.text-input').val('');
        newInputRow.find('.date-input').val('');
    
        // Append the cloned row to the #inputs container
        $('#inputs').append(newInputRow);
    });

    // Send button click handler
    $('#sendBtn').on('click', function () {
        // Collect all input rows from the #inputs div
        const inputRows = $('#inputs .input-row');
        const tripPlans = [];
    
        // Iterate over each input row to get city and date values
        inputRows.each(function() {
            const city = $(this).find('.text-input').val().trim();
            const date = $(this).find('.date-input').val().trim();
            // Only include pairs where both city and date are non-empty
            if (city && date) {
                tripPlans.push({ city, date });
            }
        });
    
        // If there are valid pairs, construct and send the message
        if (tripPlans.length > 0) {
            // Format WebSocket message: weather:city:date,city:date,...
            const wsMessage = `weather:${tripPlans.map(plan => `${plan.city}:${plan.date}`).join(',')}`;
    
            // Format chatbox message
            let chatMessage;
            if (tripPlans.length === 1) {
                // Single destination: "I'm planning on going to Paris on 2023-05-01."
                chatMessage = `I'm planning on going to ${tripPlans[0].city} on ${tripPlans[0].date}.`;
            } else if (tripPlans.length === 2) {
                // Two destinations: "I'm planning on going to Paris on 2023-05-01 and London on 2023-05-10."
                chatMessage = `I'm planning on going to ${tripPlans[0].city} on ${tripPlans[0].date} and ${tripPlans[1].city} on ${tripPlans[1].date}.`;
            } else {
                // Three or more: "I'm planning on going to Paris on 2023-05-01, London on 2023-05-10, and New York on 2023-05-20."
                const last = `${tripPlans[tripPlans.length - 1].city} on ${tripPlans[tripPlans.length - 1].date}`;
                const firstPart = tripPlans.slice(0, -1).map(plan => `${plan.city} on ${plan.date}`).join(', ');
                chatMessage = `I'm planning on going to ${firstPart}, and ${last}.`;
            }
    
            // Send the WebSocket message and add the chatbox message
            sendMessage(ws, wsMessage);
            addMessage(chatMessage, 'user');
        } else {
            // Log a message if no valid pairs are found
            console.log('No valid city and date entered.');
        }
    });
});

// Function to establish WebSocket connection
function connectWebSocket() {
    const ws = new WebSocket('ws://localhost:8080/chat');

    ws.onopen = () => {
        console.log('Connection to WebSocket established');
    };

    ws.onmessage = (event) => {
        console.log('Message received from server:', event.data);
        addMessage(event.data, 'bot');
    };

    ws.onerror = (error) => {
        console.error('WebSocket error:', error);
    };

    ws.onclose = () => {
        console.log('WebSocket connection closed');
        $('#chat-messages').empty();
        $('#weatherBtn').show();
        $('#weatherOptions').hide();
    };

    return ws;
}

// Function to send a message through WebSocket
function sendMessage(ws, message) {
    if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(message);
        console.log('Message sent:', message);
    } else {
        console.log('WebSocket is not open. Cannot send message.');
    }
}

// Function to add a message to the chatbox
function addMessage(text, sender) {
    // Create a new <li> element for the message
    const messageItem = $('<li></li>'); // Use jQuery to create the element

    // Add a class based on the sender (e.g., 'bot-message' or 'user-message')
    messageItem.addClass(`${sender}-message`);

    // Format the message content
    const messageContent = `
        <div class="message-content">
            <p>${text.replace(/\n/g, '<br>')}</p>
            <small class="timestamp">${new Date().toLocaleTimeString()}</small>
        </div>
    `;

    // Append the content to the <li> element
    messageItem.html(messageContent);

    // Append the <li> to the chat messages list
    $('#chat-messages').append(messageItem);

    // Scroll to the bottom of the chat messages container
    const messagesContainer = $('#chat-messages')[0];
    messagesContainer.scrollTo({
        top: messagesContainer.scrollHeight,
        behavior: 'smooth',
    });
}
}

citiesSearch.js:{
  let cities = [];
// Load cities from cities.txt
function loadCities() {
    $.ajax({
        url: 'cities.txt',
        method: 'GET',
        dataType: 'text',
        success: function(data) {
            cities = data.split('\n')
                .map(city => city.trim())
                .filter(city => city.length > 0);
            $('.text-input').prop('disabled', false);
            console.log(`Loaded ${cities.length} cities`);
        },
        error: function(xhr, status, error) {
            console.error('Error loading cities:', error);
            $('.text-input').attr('placeholder', 'Error loading cities');
        }
    });
}

// Debounce function
function debounce(func, wait) {
    let timeout;
    return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
    };
}

// Optimized search function with limit
function searchCities(query, $inputField, maxResults = 5) {
    const q = query.toLowerCase();
    const results = [];
    let count = 0;

    // Binary search to find starting point
    let startIndex = binarySearchStart(q);
    
    // Collect matches
    for (let i = startIndex; i < cities.length && count < maxResults; i++) {
        const cityLower = cities[i].toLowerCase();
        if (cityLower.startsWith(q)) {
            results.push(cities[i]);
            count++;
        } else if (cityLower > q) {
            break;
        }
    }
    displaySuggestions(results, $inputField);
}

// Binary search for starting point
function binarySearchStart(query) {
    let left = 0;
    let right = cities.length - 1;
    
    while (left <= right) {
        const mid = Math.floor((left + right) / 2);
        const cityLower = cities[mid].toLowerCase();
        
        if (cityLower < query) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return left;
}

function displaySuggestions(filteredCities, $inputField) {
    const $suggestions = $('#suggestions');
    $suggestions.empty();
    
    if (filteredCities.length > 0 && $inputField.val().trim() !== '') {
        $.each(filteredCities, function(index, city) {
            $('<div>')
                .addClass('suggestion-item')
                .text(city)
                .on('click', function() {
                    $inputField.val(city);
                    $suggestions.hide();
                })
                .appendTo($suggestions);
        });
        const pos = $inputField.position();
        const suggestionsHeight = $suggestions.outerHeight();
        
        // Position the suggestions dropdown above the input field
        $suggestions.css({
            top: pos.top - suggestionsHeight, // Position above the input field
            left: pos.left,
            width: $inputField.outerWidth(),
            position: 'absolute',
            zIndex: 1000,
        }).show();
    } else {
        $suggestions.hide();
    }
}

// Event handlers with jQuery
$(document).ready(function() {
    const debouncedSearch = debounce(searchCities, 200);

    // Use event delegation to handle dynamically added inputs
    $(document).on('input', '.text-input', function() {
        debouncedSearch($(this).val(), $(this));
    });

    $(document).on('focus', '.text-input', function() {
        if ($(this).val().trim() !== '') {
            searchCities($(this).val(), $(this));
        }
    });

    $(document).on('click', function(e) {
        if (!$(e.target).closest('.text-input, #suggestions').length) {
            $('#suggestions').hide();
        }
    });

    // Start loading cities
    loadCities();
});
}

script.js:{
  // Use jQuery to select elements
const messageInput = $('#cityInput'); 
const sendButton = $('.send-btn');
const chatMessages = $('.chat-messages');

// Websocket setup
const ws = new WebSocket('ws://localhost:8080/chat');

// Function to add formatted messages
function addMessage(text, sender) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message mb-3`;
    
    // Different formatting for bot and user
    if(sender === 'bot') {
        messageDiv.innerHTML = `
            <div class="card bg-dark text-white border-0">
                <div class="card-body p-3">
                    <p class="mb-0">${text.replace(/\n/g, '<br>')}</p>
                    <small class="text-muted">${new Date().toLocaleTimeString()}</small>
                </div>
            </div>
        `;
    } else {
        messageDiv.innerHTML = `
            <div class="card bg-primary text-white border-0">
                <div class="card-body p-3">
                    <p class="mb-0">${text}</p>
                    <small class="text-white-50">${new Date().toLocaleTimeString()}</small>
                </div>
            </div>
        `;
    }

    chatMessages.append(messageDiv);
    const messagesContainer = $('.chat-messages')[0];
    messagesContainer.scrollTo({
        top: messagesContainer.scrollHeight,
        behavior: 'smooth'
    });
}

// WebSocket handlers
ws.onopen = () => {
    console.log('Connected to WebSocket server');
    addMessage('Connected to travel assistant', 'bot');
}

ws.onmessage = (event) => {
    addMessage(event.data, 'bot');
}

ws.onerror = (error) => {
    addMessage('Connection error: ' + error.message, 'system');
}

ws.onclose = () => {
    addMessage('Disconnected from server', 'system');
}

// Send message function
function sendMessage() {
    const userMessage = messageInput.val().trim();
    if (!userMessage) return;

    addMessage(userMessage, 'user');
    ws.send(userMessage);
    messageInput.val('');
}

sendButton.on('click', () => {
    const rows = document.querySelectorAll(".city-row");
    let parts = [];

    rows.forEach(row => {
        const cityInput = row.querySelector(".message-input");
        const dateInput = row.querySelector(".date-input");

        const city = cityInput?.value?.trim();
        const date = dateInput?.value?.trim();

        if(city && date){
            const day = new Date(date).toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
            parts.push(`${city.toLowerCase()}:${day}`);
        }
    });

    if (parts.length > 0 ){
        const fullMessge = `weather:${parts.join(",")}`;

        addMessage(fullMessge, 'user'); // Display the message in the chat
        ws.send(fullMessge);// Send the message to the server
    } else {
        alert("Please fill in all fields before sending.");
    }
});

messageInput.on('keypress', (e) => {
    if (e.key === 'Enter') sendMessage();
});

// Automatic focus on Input field
$(document).ready(function() {
    messageInput.focus();
});

document.addEventListener("DOMContentLoaded", () => {

    messageInput.focus(); // Focus on the input field when the page loads



    const cityContainer = document.getElementById("cityContainer");
    const today = new Date().toISOString().split('T')[0];

    // Sets the minimum date to today and future days
    const applyMinDate = () => {
        document.querySelectorAll(".date-input").forEach(input => {
            input.setAttribute("min", today);
        });
    };

    applyMinDate(); // Apply the minimum date on load

    let cityCount = 1; // Cities accountant
  
    cityContainer.addEventListener("click", function (e) {
      // Checks if the Add City button has been clicked
      if (e.target.closest(".add-city-btn")) {
        const addButton = e.target.closest(".add-city-btn");
  
        if (cityCount >= 5) {
            alert("You can only add up to 5 cities.");
            return;
        }

        // Hide the current button
        addButton.style.display = "none";


  
        // Creates the new city field
        const newRow = document.createElement("div");
        newRow.classList.add("city-row");
  
        newRow.innerHTML = `
          <div class="search-container d-flex align-items-center gap-2 mt-2">
          <input type="text" class="message-input" placeholder="Search for a city...">
          <input type="date" class="date-input">
          <button class="add-city-btn btn btn-outline-light">
            <i class='bx bx-plus'></i>
          </button>
        </div>
      `;
  
        // Adds the new field to the interface
        cityContainer.appendChild(newRow);
        cityCount++; // Increments the city count
  
        // Makes the new button visible
        const newButton = newRow.querySelector(".add-city-btn");
        newButton.style.display = "block";

        applyMinDate(); // Apply the minimum date to the new input field
      }
    });

}